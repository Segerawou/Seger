Запреты
1. Неиспользование магических чисел
   - Запрещается использование "магических чисел" в коде. Все числовые значения должны быть заменены на константы с осмысленными именами.
  
   // Плохо
   int timeout = 30;
   // Хорошо
   const int TIMEOUT_SECONDS = 30;
   int timeout = TIMEOUT_SECONDS;
   
2. Запрещение длинных функций
   - Функции не должны превышать 50 строк. Если функция длиннее, её следует разбить на более мелкие функции.
  
   // Плохо
   void longFunction() {
       // слишком много кода
   }
   // Хорошо
   void helperFunction1() {
       // часть кода
   }
   void helperFunction2() {
       // другая часть кода
   }
   
3. Запрет на использование глобальных переменных
   - Запрещено использование глобальных переменных. Все переменные должны быть локальными либо передаваться через параметры функций.
  
   // Плохо
   int globalVar;
   // Хорошо
   void function(int param) {
       int localVar;
   }
   
Рекомендации
1. Использование именованных пространств (namespaces)
   - Рекомендуется использовать пространства имен для группировки связанных функций и классов, чтобы избежать конфликтов имен.
  
   namespace JapaneseLearningApp {
       void DisplayKanji();
       void StudyMode();
   }
   
2. Комментарии к коду
   - Рекомендуется снабжать сложные или важные участки кода комментариями, поясняющими их работу.
  
   // Плохо
   int x = a + b;
   // Хорошо
   int x = a + b; // Сложение переменных для вычисления координаты X
   
3. Использование стандартных библиотек
   - Рекомендуется использовать стандартные библиотеки и функции STL для обеспечения кросс-платформенности и оптимизации кода.
  
   // Плохо
   int arr[10];
   for (int i = 0; i < 10; ++i) {
       arr[i] = 0;
   }
   // Хорошо
   std::vector<int> arr(10, 0);
   
Требования
1. Форматирование кода
   - Код должен быть отформатирован согласно принятым в проекте соглашениям (например, отступы в 4 пробела, отступы для каждой новой структуры и т.д.).
  
   // Плохо
   int function() {
   return 0;
   }
   // Хорошо
   int function() {
       return 0;
   }
   
2. Конвенции именования
   - Переменные, функции и классы должны именоваться в соответствии с установленными в проекте соглашениями (например, camelCase для переменных и функций, PascalCase для классов).
  
   // Плохо
   int myvariable;
   void myFunction();
   // Хорошо
   int myVariable;
   void MyFunction();
   
3. Обработка ошибок
   - Все возможные ошибки должны быть обработаны, а исключения (exceptions) должны использоваться для критических ситуаций.
  
   // Плохо
   int divide(int a, int b) {
       return a / b;
   }
   // Хорошо
   int divide(int a, int b) {
       if (b == 0) {
           throw std::invalid_argument("Division by zero");
       }
       return a / b;
   }
   
Чек-лист для проверки корректности кода

1. Форматирован ли код согласно соглашениям проекта?
2. Нет ли магических чисел, все ли числовые значения заменены на константы?
3. Все ли функции не превышают 50 строк?
4. Отсутствуют ли глобальные переменные?
5. Используются ли комментарии для сложных и важных участков кода?
6. Все ли имена переменных, функций и классов соответствуют конвенциям именования?
7. Используются ли пространства имен для группировки функций и классов?
8. Обрабатываются ли все возможные ошибки и исключения?
9. Используются ли стандартные библиотеки и функции STL?
10. Проверен ли код на наличие потенциальных утечек памяти и других ресурсов?